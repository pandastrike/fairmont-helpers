"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _array = require("../src/array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async function () {
  // import sinon from "sinon"
  return (0, _amen.print)((await (0, _amen.test)("array helperrs", [(0, _amen.test)("first", function () {
    return (0, _assert.default)((0, _array.first)([1, 2, 3, 4, 5]) === 1);
  }), (0, _amen.test)("second", function () {
    return (0, _assert.default)((0, _array.second)([1, 2, 3, 4, 5]) === 2);
  }), (0, _amen.test)("third", function () {
    return (0, _assert.default)((0, _array.third)([1, 2, 3, 4, 5]) === 3);
  }), (0, _amen.test)("fourth", function () {
    return (0, _assert.default)((0, _array.fourth)([1, 2, 3, 4, 5]) === 4);
  }), (0, _amen.test)("fifth", function () {
    return (0, _assert.default)((0, _array.fifth)([1, 2, 3, 4, 5]) === 5);
  }), (0, _amen.test)("nth", function () {
    return (0, _assert.default)((0, _array.nth)(3, [1, 2, 3, 4, 5]) === 3);
  }), (0, _amen.test)("last", function () {
    return (0, _assert.default)((0, _array.last)([1, 2, 3, 4, 5]) === 5);
  }), (0, _amen.test)("rest", function () {
    return (0, _assert.default)((0, _array.first)((0, _array.rest)([1, 2, 3, 4, 5])) === 2);
  }), (0, _amen.test)("includes", function () {
    return (0, _assert.default)((0, _array.includes)(3, [1, 2, 3, 4, 5]) && !(0, _array.includes)(6, [1, 2, 3, 4, 5]));
  }), (0, _amen.test)("findIndexOf"), (0, _amen.test)("findLastIndexOf"), (0, _amen.test)("push/enqueue", function () {
    return _assert.default.deepEqual((0, _array.push)([1, 2, 3, 4], 5), [1, 2, 3, 4, 5]);
  }), (0, _amen.test)("pop/dequeue", function () {
    return (0, _assert.default)((0, _array.pop)([1, 2, 3, 4, 5]) === 5);
  }), (0, _amen.test)("shift"), (0, _amen.test)("unshift"), (0, _amen.test)("splice"), (0, _amen.test)("cat", function () {
    return _assert.default.deepEqual((0, _array.cat)([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
  }), (0, _amen.test)("slice", function () {
    _assert.default.deepEqual((0, _array.slice)(1, 2, [1, 2, 3, 4, 5]), [2]);

    _assert.default.deepEqual((0, _array.slice)(2, 5, [1, 2, 3, 4, 5]), [3, 4, 5]);

    _assert.default.deepEqual((0, _array.slice)(1, -2, [1, 2, 3, 4, 5]), [2, 3]);

    _assert.default.deepEqual((0, _array.slice)(-3, -1, [1, 2, 3, 4, 5]), [3, 4]);

    return _assert.default.deepEqual((0, _array.slice)(-3, -1, "0123456789"), "78");
  }), (0, _amen.test)("splice"), (0, _amen.test)("uniqueBy", function () {
    var mod3;

    mod3 = function (x) {
      return x % 3;
    };

    return _assert.default.deepEqual((0, _array.uniqueBy)(mod3, [1, 2, 3, 4, 5]), [1, 2, 0]);
  }), (0, _amen.test)("unique", function () {
    return _assert.default.deepEqual((0, _array.unique)([...[1, 2, 3, 4], ...[4, 3, 2, 1]]), [1, 2, 3, 4]);
  }), (0, _amen.test)("dupes", function () {
    return _assert.default.deepEqual((0, _array.dupes)([...[1, 2, 3], ...[2, 1]]), [1, 2]);
  }), (0, _amen.test)("union", function () {
    return _assert.default.deepEqual((0, _array.union)([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
  }), (0, _amen.test)("intersection", function () {
    return _assert.default.deepEqual((0, _array.intersection)([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9, 10]), [4, 5, 6]);
  }), (0, _amen.test)("difference", function () {
    return _assert.default.deepEqual((0, _array.difference)([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 10]);
  }), (0, _amen.test)("complement", function () {
    return _assert.default.deepEqual((0, _array.complement)([1, 2, 3, 4, 5], [3, 4, 5, 6]), [1, 2]);
  }), (0, _amen.test)("insert", function () {
    _assert.default.deepEqual((0, _array.insert)([4, 2, 1], 3, 1), [4, 3, 2, 1]);

    _assert.default.deepEqual((0, _array.insert)([1, 2, 4], 3, -1), [1, 2, 3, 4]);

    return _assert.default.deepEqual((0, _array.insert)([2, 3, 4], 1, 0), [1, 2, 3, 4]);
  }), (0, _amen.test)("remove", function () {
    _assert.default.deepEqual((0, _array.remove)([1, 2, 3, 4, 5], 3), [1, 2, 4, 5]);

    return _assert.default.deepEqual((0, _array.remove)([1, 2, 3, 4, 5], 6), [1, 2, 3, 4, 5]);
  }), (0, _amen.test)("shuffle"), //   # use a sinon sandbox b/c we're mocking globals
  //   sinon.test ->
  //     # stubbing Math.random() allows us to determine the algorithm used
  //     # by expecting a specific result
  //     sinon.stub(Math, "random").returns 0.8
  //     # "Given Math.random() always returns 0.8..."
  //     # * if the biased j = (i * array.size) algorithm is used,
  //     #   the expected result is: [ 9, 1, 2, 3, 4, 5, 6, 7, 10, 8 ]
  //     # * if the fisher-yates algorithm used, the expected result is:
  //     fisher_yates = [ 1, 2, 3, 4, 10, 5, 6, 7, 8, 9 ]
  //     assert.deepEqual (shuffle [1..10]), fisher_yates
  (0, _amen.test)("range", function () {
    _assert.default.deepEqual((0, _array.range)(1, 5), [1, 2, 3, 4, 5]);

    return _assert.default.deepEqual((0, _array.range)(5, 1), [5, 4, 3, 2, 1]);
  }), (0, _amen.test)("join"), (0, _amen.test)("fill"), (0, _amen.test)("pluck"), (0, _amen.test)("pair")])));
})();
//# sourceMappingURL=data:application/json;base64,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IHt0ZXN0LCBwcmludH0gZnJvbSBcImFtZW5cIlxuXG5pbXBvcnQge2ZpcnN0LCBzZWNvbmQsIHRoaXJkLCBmb3VydGgsIGZpZnRoLCBudGgsIGxhc3QsIHJlc3QsXG4gIGVtcHR5LCBpbmNsdWRlcywgZmluZEluZGV4T2YsIGZpbmRMYXN0SW5kZXhPZiwgdW5pcXVlQnksIHVuaXF1ZSwgdW5pcSwgZHVwZXMsXG4gIHVuaW9uLCBpbnRlcnNlY3Rpb24sIGRpZmZlcmVuY2UsIGNvbXBsZW1lbnQsIHB1c2gsIHBvcCwgc2hpZnQsIHVuc2hpZnQsXG4gIGVucXVldWUsIGRlcXVldWUsIHNwbGljZSwgaW5zZXJ0LCByZW1vdmUsIGNhdCwgc2xpY2UsIGpvaW4sIGZpbGwsXG4gIHNodWZmbGUsIHJhbmdlLCBwbHVjaywgcGFpcn0gZnJvbSBcIi4uL3NyYy9hcnJheVwiXG5cbiMgaW1wb3J0IHNpbm9uIGZyb20gXCJzaW5vblwiXG5cbmRvIC0+XG5cbiAgcHJpbnQgYXdhaXQgdGVzdCBcImFycmF5IGhlbHBlcnJzXCIsIFtcblxuICAgIHRlc3QgXCJmaXJzdFwiLCAtPiBhc3NlcnQgKGZpcnN0IFsxLi41XSkgPT0gMVxuICAgIHRlc3QgXCJzZWNvbmRcIiwgLT4gYXNzZXJ0IChzZWNvbmQgWzEuLjVdKSA9PSAyXG4gICAgdGVzdCBcInRoaXJkXCIsIC0+IGFzc2VydCAodGhpcmQgWzEuLjVdKSA9PSAzXG4gICAgdGVzdCBcImZvdXJ0aFwiLCAtPiBhc3NlcnQgKGZvdXJ0aCBbMS4uNV0pID09IDRcbiAgICB0ZXN0IFwiZmlmdGhcIiwgLT4gYXNzZXJ0IChmaWZ0aCBbMS4uNV0pID09IDVcbiAgICB0ZXN0IFwibnRoXCIsIC0+IGFzc2VydCAobnRoIDMsIFsxLi41XSkgPT0gM1xuICAgIHRlc3QgXCJsYXN0XCIsIC0+IGFzc2VydCAobGFzdCBbMS4uNV0pID09IDVcbiAgICB0ZXN0IFwicmVzdFwiLCAtPiBhc3NlcnQgKGZpcnN0IHJlc3QgWzEuLjVdKSA9PSAyXG4gICAgdGVzdCBcImluY2x1ZGVzXCIsIC0+IGFzc2VydCAoaW5jbHVkZXMgMywgWzEuLjVdKSAmJiAhKGluY2x1ZGVzIDYsIFsxLi41XSlcbiAgICB0ZXN0IFwiZmluZEluZGV4T2ZcIlxuICAgIHRlc3QgXCJmaW5kTGFzdEluZGV4T2ZcIlxuICAgIHRlc3QgXCJwdXNoL2VucXVldWVcIiwgLT4gYXNzZXJ0LmRlZXBFcXVhbCAocHVzaCBbMS4uNF0sIDUpLCBbMS4uNV1cbiAgICB0ZXN0IFwicG9wL2RlcXVldWVcIiwgLT4gYXNzZXJ0IChwb3AgWzEuLjVdKSA9PSA1XG4gICAgdGVzdCBcInNoaWZ0XCJcbiAgICB0ZXN0IFwidW5zaGlmdFwiXG4gICAgdGVzdCBcInNwbGljZVwiXG4gICAgdGVzdCBcImNhdFwiLCAtPiBhc3NlcnQuZGVlcEVxdWFsIChjYXQgWzEuLjVdLCBbNi4uMTBdKSwgWzEuLjEwXVxuXG4gICAgdGVzdCBcInNsaWNlXCIsIC0+XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIChzbGljZSAgMSwgIDIsIFsxLi41XSksIFsyXVxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAoc2xpY2UgIDIsICA1LCBbMS4uNV0pLCBbMyw0LDVdXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIChzbGljZSAgMSwgLTIsIFsxLi41XSksIFsyLDNdXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIChzbGljZSAtMywgLTEsIFsxLi41XSksIFszLDRdXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIChzbGljZSAtMywgLTEsIFwiMDEyMzQ1Njc4OVwiKSwgXCI3OFwiXG5cbiAgICB0ZXN0IFwic3BsaWNlXCJcblxuICAgIHRlc3QgXCJ1bmlxdWVCeVwiLCAtPlxuICAgICAgbW9kMyA9ICh4KSAtPiB4ICUgM1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAodW5pcXVlQnkgbW9kMywgWzEuLjVdKSwgWzEsMiwwXVxuXG4gICAgdGVzdCBcInVuaXF1ZVwiLCAtPlxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAodW5pcXVlIFtbMS4uNF0uLi4sIFs0Li4xXS4uLl0pLCBbMS4uNF1cblxuICAgIHRlc3QgXCJkdXBlc1wiLCAtPlxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAoZHVwZXMgW1sxLi4zXS4uLiwgWzIuLjFdLi4uXSksIFsxLDJdXG5cbiAgICB0ZXN0IFwidW5pb25cIiwgLT5cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgKHVuaW9uIFsxLi42XSwgWzQuLjEwXSksIFsxLi4xMF1cblxuICAgIHRlc3QgXCJpbnRlcnNlY3Rpb25cIiwgLT5cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgKGludGVyc2VjdGlvbiBbMS4uNl0sIFs0Li4xMF0pLCBbNC4uNl1cblxuICAgIHRlc3QgXCJkaWZmZXJlbmNlXCIsIC0+XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIChkaWZmZXJlbmNlIFsxLi45XSwgWzIuLjEwXSksIFsxLDEwXVxuXG4gICAgdGVzdCBcImNvbXBsZW1lbnRcIiwgLT5cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgKGNvbXBsZW1lbnQgWzEuLjVdLCBbMy4uNl0pLCBbMSwyXVxuXG4gICAgdGVzdCBcImluc2VydFwiLCAtPlxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAoaW5zZXJ0IFs0LDIsMV0sIDMsIDEpLCBbNCwzLDIsMV1cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgKGluc2VydCBbMSwyLDRdLCAzLCAtMSksIFsxLi40XVxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAoaW5zZXJ0IFsyLi40XSwgMSwgMCksIFsxLi40XVxuXG4gICAgdGVzdCBcInJlbW92ZVwiLCAtPlxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAocmVtb3ZlIFsxLi41XSwgMyksIFsxLDIsNCw1XVxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCAocmVtb3ZlIFsxLi41XSwgNiksIFsxLi41XVxuXG4gICAgdGVzdCBcInNodWZmbGVcIlxuICAgICMgICAjIHVzZSBhIHNpbm9uIHNhbmRib3ggYi9jIHdlJ3JlIG1vY2tpbmcgZ2xvYmFsc1xuICAgICMgICBzaW5vbi50ZXN0IC0+XG4gICAgIyAgICAgIyBzdHViYmluZyBNYXRoLnJhbmRvbSgpIGFsbG93cyB1cyB0byBkZXRlcm1pbmUgdGhlIGFsZ29yaXRobSB1c2VkXG4gICAgIyAgICAgIyBieSBleHBlY3RpbmcgYSBzcGVjaWZpYyByZXN1bHRcbiAgICAjICAgICBzaW5vbi5zdHViKE1hdGgsIFwicmFuZG9tXCIpLnJldHVybnMgMC44XG4gICAgIyAgICAgIyBcIkdpdmVuIE1hdGgucmFuZG9tKCkgYWx3YXlzIHJldHVybnMgMC44Li4uXCJcbiAgICAjICAgICAjICogaWYgdGhlIGJpYXNlZCBqID0gKGkgKiBhcnJheS5zaXplKSBhbGdvcml0aG0gaXMgdXNlZCxcbiAgICAjICAgICAjICAgdGhlIGV4cGVjdGVkIHJlc3VsdCBpczogWyA5LCAxLCAyLCAzLCA0LCA1LCA2LCA3LCAxMCwgOCBdXG4gICAgIyAgICAgIyAqIGlmIHRoZSBmaXNoZXIteWF0ZXMgYWxnb3JpdGhtIHVzZWQsIHRoZSBleHBlY3RlZCByZXN1bHQgaXM6XG4gICAgIyAgICAgZmlzaGVyX3lhdGVzID0gWyAxLCAyLCAzLCA0LCAxMCwgNSwgNiwgNywgOCwgOSBdXG4gICAgIyAgICAgYXNzZXJ0LmRlZXBFcXVhbCAoc2h1ZmZsZSBbMS4uMTBdKSwgZmlzaGVyX3lhdGVzXG5cbiAgICB0ZXN0IFwicmFuZ2VcIiwgLT5cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgKHJhbmdlIDEsIDUpLCBbMS4uNV1cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgKHJhbmdlIDUsIDEpLCBbNS4uMV1cblxuICAgIHRlc3QgXCJqb2luXCJcbiAgICB0ZXN0IFwiZmlsbFwiXG4gICAgdGVzdCBcInBsdWNrXCJcbiAgICB0ZXN0IFwicGFpclwiXG5cbiAgXVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=array.coffee